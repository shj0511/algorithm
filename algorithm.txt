8,一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。

public class Solution {
    public int JumpFloor(int target) {
        /******************递归*************
        if(target==1){return 1;}
        if(target==2){return 2;}
        
        return JumpFloor(target-1)+JumpFloor(target-2);
        
        ********/
        
        
        /*****************循环
         if(target==1){return 1;}
        if(target==2){return 2;}
        int qt=1;
        int zt=2;
        int step=0;
        for(int i=3;i<=target;i++){
            step=zt+qt;
            qt=zt;
            zt=step;
            
        }  
        return step;*/
            
            
        

    }
}


9,一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

public class Solution {
    public int JumpFloorII(int target) {
        
        return 1<<(target-1);
        
    }
}




***************************************************
********************************************************
10,我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？

public class Solution {
    public int RectCover(int target) {
        
        /*作者：牛客4894960号
链接：https://www.nowcoder.com/questionTerminal/72a5a919508a4251859fb2cfb987a0e6
来源：牛客网

其实可以这样思考：小矩形板子只有两种可能，竖着 或 横着，
                而且横着的话必然是两块板子拼成一个2*2的正方形，那么接下来就简单了—— 
                一只青蛙每次只能跳1个台阶或两个台阶，要跳上n个台阶有多少种方法？*/


        if(target==1){return 1;}
        if(target==2){return 2;}
        else {
            int zt=2;
            int qt=1;
            int result=0;
            for(int i=3;i<=target;i++){
                result=zt+qt;
                qt=zt;
                zt=result;
                 }
            return result;
            }
       }
}


*********************************************
***********************************************************
11,输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。


public class Solution {
    public int NumberOf1(int n) {
        
        
        /*
分析一下代码：
这段小小的代码，很是巧妙。
如果一个整数不为0，那么这个整数至少有一位是1。如果我们把这个整数减1，
那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1(如果最右边的1后面还有0的话)。
其余所有位将不会受到影响。

举个例子：
一个二进制数1100，从右边数起第三位是处于最右边的一个1。
减去1后，第三位变成0，它后面的两位0变成了1，而前面的1保持不变，因此得到的结果是1011.
我们发现减1的结果是把最右边的一个1开始的所有位都取反了。
这个时候如果我们再把原来的整数和减去1之后的结果做与运算，
从原来整数最右边一个1那一位开始所有位都会变成0。
如1100&1011=1000.也就是说，把一个整数减去1，再和原整数做与运算，
会把该整数最右边一个1变成0.
那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。*/
        int count=0;
        while(n!=0){
            count+=1;
            n=n&(n-1);
            
        }
        return count;
        
        

    }
}
